import NavbarHeader from "@/components/NavbarHeader";
import { DataTable } from "@/components/data-table";
import { roundToNearest } from "@/lib/utils";
import { useQuery } from "@tanstack/react-query";
import { ColumnDef } from "@tanstack/react-table";
import { Compass } from "lucide-react";
import Head from "next/head";
import { type GetCoursesResponse } from "./api/courses";

type ExploreCourseRow = {
  courseCode: string;
  courseName: string;
  ratingsCount: number;
  likedPercent: string;
  difficulty: string;
  attendancePercent: string;
};

const columns: ColumnDef<ExploreCourseRow | undefined>[] = [
  {
    accessorKey: "courseCode",
    header: "Course Code",
  },
  {
    accessorKey: "courseName",
    header: "Course Name",
  },
  {
    accessorKey: "ratingsCount",
    header: "Ratings",
  },
  {
    accessorKey: "likedPercent",
    header: "Liked",
  },
  {
    accessorKey: "difficulty",
    header: "Difficulty",
  },
  {
    accessorKey: "attendancePercent",
    header: "Attendance",
  },
];

function generateCourseRow(course: GetCoursesResponse["courses"][0]): ExploreCourseRow | undefined {
  return {
    courseCode: course.course_code,
    courseName: course.course_name,
    ratingsCount: course._count?.review_id ?? 0,
    likedPercent: roundToNearest(course._count?.liked ?? 0, 0) + "%",
    difficulty: `${roundToNearest((course._avg?.difficulty ?? 0) / 2, 1)}/5`,
    attendancePercent: roundToNearest(course._avg?.attendance ?? 0, 0) + "%",
  };
}

const ExplorePage = () => {
  const {
    data: coursesData,
    isLoading,
    isError,
    isSuccess,
  } = useQuery({
    queryKey: ["explore-courses"],
    queryFn: async ({ pageParam = 0 }) => {
      const searchParams = new URLSearchParams({
        cursor: pageParam,
        sortkey: "liked",
        sortorder: "desc",
      });

      const response = await fetch(`/api/courses?${searchParams.toString()}`);
      if (!response.ok) throw new Error("Courses were not found");
      const coursesData: GetCoursesResponse = await response.json();
      const courses = coursesData.courses.map((course) => generateCourseRow(course));
      return {
        ...coursesData,
        courses,
      };
    },
  });

  return (
    <>
      <Head>
        <title>Explore Courses | Western Rank</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <div className="flex flex-col min-h-screen">
        <NavbarHeader
          heading="Explore Courses"
          subHeading="See all Western University Courses"
          Icon={Compass}
          searchBar
          sticky
        />
        <div className="flex light text-primary bg-background py-4 px-2 md:px-8 lg:px-15 xl:px-40 flex-grow">
          <DataTable columns={columns} data={coursesData?.courses ?? []} />
        </div>
      </div>
    </>
  );
};

export default ExplorePage;
