generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Course {
  course_code          String          @id @default(cuid()) @db.VarChar(255)
  course_name          String
  antirequisites       Course[]        @relation("CourseAntirequisite")
  antirequisiteOf      Course[]        @relation("CourseAntirequisite")
  prerequisites        Course[]        @relation("CoursePrerequisite")
  prerequisiteOf       Course[]        @relation("CoursePrerequisite")
  corequisites         Course[]        @relation("CourseCorequisite")
  corequisiteOf        Course[]        @relation("CourseCorequisite")
  precorequisites      Course[]        @relation("CoursePrecorequisite")
  precorequisiteOf     Course[]        @relation("CoursePrecorequisite")
  antirequisites_text  Json?
  prerequisites_text   Json?
  corequisites_text    Json?
  precorequisites_text Json?
  description          String?
  location             String?
  extra_info           String?
  course_reviews       Course_Review[]
  category_code        String          @default("NONE")
  category             Category        @relation(fields: [category_code], references: [category_code])
}

model Category {
  category_code String         @id @default(cuid()) @db.VarChar(255)
  category_name String
  breadth       BreadthTypes[]
  courses       Course[]
}

enum BreadthTypes {
  A
  B
  C
}

model Course_Review {
  review_id     Int       @id @default(autoincrement())
  professor_name String
  professor_id   Int?
  review        String?
  difficulty    Int
  liked         Boolean
  attendance    Int
  anon          Boolean
  term_taken    Term
  date_taken    DateTime  @db.Date
  date_created  DateTime  @default(now()) @db.Timestamptz(6)
  last_edited   DateTime  @default(now()) @db.Timestamptz(6)
  course_code   String    @db.VarChar(255)
  email         String
  useful        Int
  course        Course    @relation(fields: [course_code], references: [course_code], onDelete: NoAction, onUpdate: NoAction)
  user          User      @relation(fields: [email], references: [email], onDelete: NoAction, onUpdate: NoAction)
  professor     Professor? @relation(fields: [professor_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String?         @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  Course_Review Course_Review[]
  sessions      Session[]
}

model Professor {
  id            Int             @id @default(autoincrement())
  name          String
  rmpId         Int?
  Course_Review Course_Review[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum Term {
  Fall
  Winter
  Summer
}
